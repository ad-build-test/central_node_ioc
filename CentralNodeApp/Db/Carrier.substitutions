########################################################################################################################
# Summary:             Carrier substitutions file to generate PVs for CPSW registers
# Author:              C. Ford <caf@slac.stanford.edu>
# Date:                21-mar-2017
# YAML config version: AmcCarrierBcm_00000018
########################################################################################################################

########################################################################################################################
# Macros:
#   P,R: The PV name as $(P):$(R)
#   DESC, PINI, SCAN, NELM, etc.: The same fields on the records
#   PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd
#   PARAM: The asyn paramter name. It must be defined in the dictionary file and assigned to a register
########################################################################################################################

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "RegisterIn.template" { pattern
{ P,          R,              DESC,                                       PINI,   SCAN,       PORT,       EGU,  PARAM              }
{ $(P), DeviceDna,           "Xilinx device DNA",                           "YES",  "Passive",  $(PORT),   "",   DeviceDna         }
{ $(P), FpgaVersion,         "FPGA firmware version number",                "YES",  "Passive",  $(PORT),   "",   FpgaVersion       }
{ $(P), UpTimeCnt,           "Seconds since last reset",                    "YES",  "1 second", $(PORT),   "s",  UpTimeCnt         }
{ $(P), DeviceId,            "Device identification",                       "YES",  "Passive",  $(PORT),   "",   DeviceId          }
{ $(P), FrameVersion,        "Received timing frame version",               "YES",  "1 second", $(PORT),   "",   FrameVersion      }
{ $(P), VersionErr,          "Version check error",                         "YES",  "1 second", $(PORT),   "",   VersionErr        }
{ $(P), SoftwareBwidthCount, "Software bandwidth counter",                  "YES",  "1 second", $(PORT),   "",   SoftwareBwidthCnt }
{ $(P), FAULT_REASON,        "Beam fault reason vector",                    "YES",  "1 second", $(PORT),   "",   BeamFaultReason   }
{ $(P), FAULT_REASON_MSB,    "Beam fault reason vector Msb",                "YES",  "1 second", $(PORT),   "",   BeamFaultReasonMsb}
{ $(P), TimeoutErrStatus,    "Timeout bit error",                           "YES",  "1 second", $(PORT),   "",   TimeoutErrStatus  }
{ $(P), EvaluationTimeStamp, "Mitigation timestamp",                        "YES",  "1 second", $(PORT),   "",   EvaluationTimeStamp }
{ $(P), SoftwareBusy,        "Soft. engine busy, waiting pause to clr",     "YES",  "1 second", $(PORT),   "",   SoftwareBusy      }
{ $(P), SoftwarePause,       "Soft. engine pause back-pressure signal",     "YES",  "1 second", $(PORT),   "",   SoftwarePause     }
{ $(P), PGP_RX_FRAME_CNT_0,      "Pgp2bAxi 0 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_0       }
{ $(P), PGP_RX_FRAME_ERR_CNT_0,  "Pgp2bAxi 0 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_0  }
{ $(P), PGP_RX_CLK_0,            "Pgp2bAxi 0 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_0          }
{ $(P), PGP_RX_LINK_DOWN_CNT_0,  "Pgp2bAxi 0 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_0    }
{ $(P), PGP_RX_LINK_ERR_CNT_0,   "Pgp2bAxi 0 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_0   }
{ $(P), PGP_TX_CLK_0,            "Pgp2bAxi 0 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_0          }
{ $(P), PGP_TX_FRAME_CNT_0,      "Pgp2bAxi 0 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_0       }
{ $(P), PGP_TX_FRAME_ERR_CNT_0,  "Pgp2bAxi 0 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_0  }
{ $(P), PGP_RX_FRAME_CNT_1,      "Pgp2bAxi 1 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_1       }
{ $(P), PGP_RX_FRAME_ERR_CNT_1,  "Pgp2bAxi 1 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_1  }
{ $(P), PGP_RX_CLK_1,            "Pgp2bAxi 1 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_1          }
{ $(P), PGP_RX_LINK_DOWN_CNT_1,  "Pgp2bAxi 1 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_1    }
{ $(P), PGP_RX_LINK_ERR_CNT_1,   "Pgp2bAxi 1 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_1   }
{ $(P), PGP_TX_CLK_1,            "Pgp2bAxi 1 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_1          }
{ $(P), PGP_TX_FRAME_CNT_1,      "Pgp2bAxi 1 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_1       }
{ $(P), PGP_TX_FRAME_ERR_CNT_1,  "Pgp2bAxi 1 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_1  }
{ $(P), PGP_RX_FRAME_CNT_2,      "Pgp2bAxi 2 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_2       }
{ $(P), PGP_RX_FRAME_ERR_CNT_2,  "Pgp2bAxi 2 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_2  }
{ $(P), PGP_RX_CLK_2,            "Pgp2bAxi 2 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_2          }
{ $(P), PGP_RX_LINK_DOWN_CNT_2,  "Pgp2bAxi 2 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_2    }
{ $(P), PGP_RX_LINK_ERR_CNT_2,   "Pgp2bAxi 2 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_2   }
{ $(P), PGP_TX_CLK_2,            "Pgp2bAxi 2 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_2          }
{ $(P), PGP_TX_FRAME_CNT_2,      "Pgp2bAxi 2 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_2       }
{ $(P), PGP_TX_FRAME_ERR_CNT_2,  "Pgp2bAxi 2 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_2  }
{ $(P), PGP_RX_FRAME_CNT_3,      "Pgp2bAxi 3 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_3       }
{ $(P), PGP_RX_FRAME_ERR_CNT_3,  "Pgp2bAxi 3 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_3  }
{ $(P), PGP_RX_CLK_3,            "Pgp2bAxi 3 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_3          }
{ $(P), PGP_RX_LINK_DOWN_CNT_3,  "Pgp2bAxi 3 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_3    }
{ $(P), PGP_RX_LINK_ERR_CNT_3,   "Pgp2bAxi 3 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_3   }
{ $(P), PGP_TX_CLK_3,            "Pgp2bAxi 3 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_3          }
{ $(P), PGP_TX_FRAME_CNT_3,      "Pgp2bAxi 3 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_3       }
{ $(P), PGP_TX_FRAME_ERR_CNT_3,  "Pgp2bAxi 3 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_3  }
{ $(P), PGP_RX_FRAME_CNT_4,      "Pgp2bAxi 4 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_4       }
{ $(P), PGP_RX_FRAME_ERR_CNT_4,  "Pgp2bAxi 4 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_4  }
{ $(P), PGP_RX_CLK_4,            "Pgp2bAxi 4 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_4          }
{ $(P), PGP_RX_LINK_DOWN_CNT_4,  "Pgp2bAxi 4 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_4    }
{ $(P), PGP_RX_LINK_ERR_CNT_4,   "Pgp2bAxi 4 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_4   }
{ $(P), PGP_TX_CLK_4,            "Pgp2bAxi 4 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_4          }
{ $(P), PGP_TX_FRAME_CNT_4,      "Pgp2bAxi 4 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_4       }
{ $(P), PGP_TX_FRAME_ERR_CNT_4,  "Pgp2bAxi 4 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_4  }
{ $(P), PGP_RX_FRAME_CNT_5,      "Pgp2bAxi 5 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_5       }
{ $(P), PGP_RX_FRAME_ERR_CNT_5,  "Pgp2bAxi 5 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_5  }
{ $(P), PGP_RX_CLK_5,            "Pgp2bAxi 5 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_5          }
{ $(P), PGP_RX_LINK_DOWN_CNT_5,  "Pgp2bAxi 5 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_5    }
{ $(P), PGP_RX_LINK_ERR_CNT_5,   "Pgp2bAxi 5 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_5   }
{ $(P), PGP_TX_CLK_5,            "Pgp2bAxi 5 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_5          }
{ $(P), PGP_TX_FRAME_CNT_5,      "Pgp2bAxi 5 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_5       }
{ $(P), PGP_TX_FRAME_ERR_CNT_5,  "Pgp2bAxi 5 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_5  }
{ $(P), PGP_RX_FRAME_CNT_6,      "Pgp2bAxi 6 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_6       }
{ $(P), PGP_RX_FRAME_ERR_CNT_6,  "Pgp2bAxi 6 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_6  }
{ $(P), PGP_RX_CLK_6,            "Pgp2bAxi 6 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_6          }
{ $(P), PGP_RX_LINK_DOWN_CNT_6,  "Pgp2bAxi 6 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_6    }
{ $(P), PGP_RX_LINK_ERR_CNT_6,   "Pgp2bAxi 6 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_6   }
{ $(P), PGP_TX_CLK_6,            "Pgp2bAxi 6 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_6          }
{ $(P), PGP_TX_FRAME_CNT_6,      "Pgp2bAxi 6 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_6       }
{ $(P), PGP_TX_FRAME_ERR_CNT_6,  "Pgp2bAxi 6 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_6  }
{ $(P), PGP_RX_FRAME_CNT_7,      "Pgp2bAxi 7 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_7       }
{ $(P), PGP_RX_FRAME_ERR_CNT_7,  "Pgp2bAxi 7 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_7  }
{ $(P), PGP_RX_CLK_7,            "Pgp2bAxi 7 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_7          }
{ $(P), PGP_RX_LINK_DOWN_CNT_7,  "Pgp2bAxi 7 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_7    }
{ $(P), PGP_RX_LINK_ERR_CNT_7,   "Pgp2bAxi 7 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_7   }
{ $(P), PGP_TX_CLK_7,            "Pgp2bAxi 7 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_7          }
{ $(P), PGP_TX_FRAME_CNT_7,      "Pgp2bAxi 7 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_7       }
{ $(P), PGP_TX_FRAME_ERR_CNT_7,  "Pgp2bAxi 7 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_7  }
{ $(P), PGP_RX_FRAME_CNT_8,      "Pgp2bAxi 8 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_8       }
{ $(P), PGP_RX_FRAME_ERR_CNT_8,  "Pgp2bAxi 8 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_8  }
{ $(P), PGP_RX_CLK_8,            "Pgp2bAxi 8 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_8          }
{ $(P), PGP_RX_LINK_DOWN_CNT_8,  "Pgp2bAxi 8 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_8    }
{ $(P), PGP_RX_LINK_ERR_CNT_8,   "Pgp2bAxi 8 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_8   }
{ $(P), PGP_TX_CLK_8,            "Pgp2bAxi 8 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_8          }
{ $(P), PGP_TX_FRAME_CNT_8,      "Pgp2bAxi 8 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_8       }
{ $(P), PGP_TX_FRAME_ERR_CNT_8,  "Pgp2bAxi 8 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_8  }
{ $(P), PGP_RX_FRAME_CNT_9,      "Pgp2bAxi 9 RX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_9       }
{ $(P), PGP_RX_FRAME_ERR_CNT_9,  "Pgp2bAxi 9 RX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_9  }
{ $(P), PGP_RX_CLK_9,            "Pgp2bAxi 9 RX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_9          }
{ $(P), PGP_RX_LINK_DOWN_CNT_9,  "Pgp2bAxi 9 RX Link Down Count",           "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_9    }
{ $(P), PGP_RX_LINK_ERR_CNT_9,   "Pgp2bAxi 9 RX Link Error Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_9   }
{ $(P), PGP_TX_CLK_9,            "Pgp2bAxi 9 TX Clock Frequency",           "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_9          }
{ $(P), PGP_TX_FRAME_CNT_9,      "Pgp2bAxi 9 TX Frame Count",               "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_9       }
{ $(P), PGP_TX_FRAME_ERR_CNT_9,  "Pgp2bAxi 9 TX Frame Error Count",         "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_9  }
{ $(P), PGP_RX_FRAME_CNT_10,     "Pgp2bAxi 10 RX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_10      }
{ $(P), PGP_RX_FRAME_ERR_CNT_10, "Pgp2bAxi 10 RX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_10 }
{ $(P), PGP_RX_CLK_10,           "Pgp2bAxi 10 RX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_10         }
{ $(P), PGP_RX_LINK_DOWN_CNT_10, "Pgp2bAxi 10 RX Link Down Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_10   }
{ $(P), PGP_RX_LINK_ERR_CNT_10,  "Pgp2bAxi 10 RX Link Error Count",         "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_10  }
{ $(P), PGP_TX_CLK_10,           "Pgp2bAxi 10 TX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_10         }
{ $(P), PGP_TX_FRAME_CNT_10,     "Pgp2bAxi 10 TX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_10      }
{ $(P), PGP_TX_FRAME_ERR_CNT_10, "Pgp2bAxi 10 TX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_10 }
{ $(P), PGP_RX_FRAME_CNT_11,     "Pgp2bAxi 11 RX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_11      }
{ $(P), PGP_RX_FRAME_ERR_CNT_11, "Pgp2bAxi 11 RX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_11 }
{ $(P), PGP_RX_CLK_11,           "Pgp2bAxi 11 RX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_11         }
{ $(P), PGP_RX_LINK_DOWN_CNT_11, "Pgp2bAxi 11 RX Link Down Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_11   }
{ $(P), PGP_RX_LINK_ERR_CNT_11,  "Pgp2bAxi 11 RX Link Error Count",         "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_11  }
{ $(P), PGP_TX_CLK_11,           "Pgp2bAxi 11 TX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_11         }
{ $(P), PGP_TX_FRAME_CNT_11,     "Pgp2bAxi 11 TX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_11      }
{ $(P), PGP_TX_FRAME_ERR_CNT_11, "Pgp2bAxi 11 TX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_11 }
{ $(P), PGP_RX_FRAME_CNT_12,     "Pgp2bAxi 12 RX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_12      }
{ $(P), PGP_RX_FRAME_ERR_CNT_12, "Pgp2bAxi 12 RX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_12 }
{ $(P), PGP_RX_CLK_12,           "Pgp2bAxi 12 RX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_12         }
{ $(P), PGP_RX_LINK_DOWN_CNT_12, "Pgp2bAxi 12 RX Link Down Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_12   }
{ $(P), PGP_RX_LINK_ERR_CNT_12,  "Pgp2bAxi 12 RX Link Error Count",         "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_12  }
{ $(P), PGP_TX_CLK_12,           "Pgp2bAxi 12 TX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_12         }
{ $(P), PGP_TX_FRAME_CNT_12,     "Pgp2bAxi 12 TX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_12      }
{ $(P), PGP_TX_FRAME_ERR_CNT_12, "Pgp2bAxi 12 TX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_12 }
{ $(P), PGP_RX_FRAME_CNT_13,     "Pgp2bAxi 13 RX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameCount_13      }
{ $(P), PGP_RX_FRAME_ERR_CNT_13, "Pgp2bAxi 13 RX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_RxFrameErrorCount_13 }
{ $(P), PGP_RX_CLK_13,           "Pgp2bAxi 13 RX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_RxClkFreq_13         }
{ $(P), PGP_RX_LINK_DOWN_CNT_13, "Pgp2bAxi 13 RX Link Down Count",          "YES",  "1 second", $(PORT),   "",       PGP_RxLinkDownCount_13   }
{ $(P), PGP_RX_LINK_ERR_CNT_13,  "Pgp2bAxi 13 RX Link Error Count",         "YES",  "1 second", $(PORT),   "",       PGP_RxLinkErrorCount_13  }
{ $(P), PGP_TX_CLK_13,           "Pgp2bAxi 13 TX Clock Frequency",          "YES",  "1 second", $(PORT),   "Hz",     PGP_TxClkFreq_13         }
{ $(P), PGP_TX_FRAME_CNT_13,     "Pgp2bAxi 13 TX Frame Count",              "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameCount_13      }
{ $(P), PGP_TX_FRAME_ERR_CNT_13, "Pgp2bAxi 13 TX Frame Error Count",        "YES",  "1 second", $(PORT),   "frames", PGP_TxFrameErrorCount_13 }
}

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "RegisterInAlarm.template" { pattern
{ P,          R,                   DESC,                                 PINI,   SCAN,         PORT,    EGU,      PARAM,                HIGH,HSV,     LOW, LSV,     INDEX  }
{ $(P), BC0_INTEGRATED_CHARGE,     "Beam Class 0 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge0         1,  MAJOR,   "",  NO_ALARM, 1     }
{ $(P), BC1_INTEGRATED_CHARGE,     "Beam Class 1 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge1         1,  MAJOR,   "",  NO_ALARM, 1     }
{ $(P), BC2_INTEGRATED_CHARGE,     "Beam Class 2 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge2         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC3_INTEGRATED_CHARGE,     "Beam Class 3 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge3         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC4_INTEGRATED_CHARGE,     "Beam Class 4 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge4         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC5_INTEGRATED_CHARGE,     "Beam Class 5 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge5         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC6_INTEGRATED_CHARGE,     "Beam Class 6 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge6         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC7_INTEGRATED_CHARGE,     "Beam Class 7 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge7         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC8_INTEGRATED_CHARGE,     "Beam Class 8 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge8         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC9_INTEGRATED_CHARGE,     "Beam Class 9 Integrated Charge",     "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge9         "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC10_INTEGRATED_CHARGE,    "Beam Class 10 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge10        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC11_INTEGRATED_CHARGE,    "Beam Class 11 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge11        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC12_INTEGRATED_CHARGE,    "Beam Class 12 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge12        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC13_INTEGRATED_CHARGE,    "Beam Class 13 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge13        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC14_INTEGRATED_CHARGE,    "Beam Class 14 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge14        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC15_INTEGRATED_CHARGE,    "Beam Class 15 Integrated Charge",    "YES",  "1 second", $(PORT),   "pC",     BeamIntCharge15        "", NO_ALARM,0,   MAJOR,    1     }
{ $(P), BC0_INTEGRATION_TIME_RAW,  "Beam Class 0 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime0           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC1_INTEGRATION_TIME_RAW,  "Beam Class 1 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime1           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC2_INTEGRATION_TIME_RAW,  "Beam Class 2 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime2           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC3_INTEGRATION_TIME_RAW,  "Beam Class 3 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime3           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC4_INTEGRATION_TIME_RAW,  "Beam Class 4 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime4           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC5_INTEGRATION_TIME_RAW,  "Beam Class 5 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime5           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC6_INTEGRATION_TIME_RAW,  "Beam Class 6 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime6           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC7_INTEGRATION_TIME_RAW,  "Beam Class 7 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime7           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC8_INTEGRATION_TIME_RAW,  "Beam Class 8 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime8           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC9_INTEGRATION_TIME_RAW,  "Beam Class 9 Integration Time",      "YES",  "1 second", $(PORT),   "",       BeamIntTime9           "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC10_INTEGRATION_TIME_RAW, "Beam Class 10 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime10          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC11_INTEGRATION_TIME_RAW, "Beam Class 11 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime11          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC12_INTEGRATION_TIME_RAW, "Beam Class 12 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime12          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC13_INTEGRATION_TIME_RAW, "Beam Class 13 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime13          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC14_INTEGRATION_TIME_RAW, "Beam Class 14 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime14          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC15_INTEGRATION_TIME_RAW, "Beam Class 15 Integration Time",     "YES",  "1 second", $(PORT),   "",       BeamIntTime15          "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC0_MINIMUM_PERIOD_RAW,    "Beam Class 0 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod0         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC1_MINIMUM_PERIOD_RAW,    "Beam Class 1 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod1         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC2_MINIMUM_PERIOD_RAW,    "Beam Class 2 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod2         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC3_MINIMUM_PERIOD_RAW,    "Beam Class 3 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod3         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC4_MINIMUM_PERIOD_RAW,    "Beam Class 4 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod4         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC5_MINIMUM_PERIOD_RAW,    "Beam Class 5 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod5         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC6_MINIMUM_PERIOD_RAW,    "Beam Class 6 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod6         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC7_MINIMUM_PERIOD_RAW,    "Beam Class 7 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod7         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC8_MINIMUM_PERIOD_RAW,    "Beam Class 8 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod8         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC9_MINIMUM_PERIOD_RAW,    "Beam Class 9 Minimum Period",        "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod9         "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC10_MINIMUM_PERIOD_RAW,   "Beam Class 10 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod10        "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC11_MINIMUM_PERIOD_RAW,   "Beam Class 11 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod11        "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC12_MINIMUM_PERIOD_RAW,   "Beam Class 12 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod12        "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC13_MINIMUM_PERIOD_RAW,   "Beam Class 13 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod13        "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC14_MINIMUM_PERIOD_RAW,   "Beam Class 14 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod14        "", NO_ALARM,"",  NO_ALARM, 1     }
{ $(P), BC15_MINIMUM_PERIOD_RAW,   "Beam Class 15 Minimum Period",       "YES",  "1 second", $(PORT),   "cycles", BeamMinPeriod15        "", NO_ALARM,"",  NO_ALARM, 1     }
}
file "RegisterInAlarm.template" { pattern
{ P,          R,                   DESC,                                 PINI,   SCAN,         PORT,    EGU,      PARAM,            HIGH, HSV,   LOW , LSV                }
{ $(P), SoftwareLossError,         "Software packet loss error",         "YES",  "1 second", $(PORT),   "",       SoftwareLossError,     1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SoftwareWdError,           "Software watchdog error",            "YES",  "1 second", $(PORT),   "",       SoftwareWdError,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MonitorReady,              "Must be OK to allow beam",           "YES",  "1 second", $(PORT),   "",       MonitorReady,          1,  NO_ALARM,0,   MAJOR       }
{ $(P), MonitorConcWdErr,          "Concentrator watchdog error",        "YES",  "1 second", $(PORT),   "",       MonitorConcWdErr,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MonitorConcStallErr,       "Mit message conc tstamp stall err",  "YES",  "1 second", $(PORT),   "",       MonitorConcStallErr,   1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_0,      "PGP 0 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt0,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_1,      "PGP 1 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt1,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_2,      "PGP 2 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt2,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_3,      "PGP 3 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt3,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_4,      "PGP 4 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt4,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_5,      "PGP 5 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt5,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_6,      "PGP 6 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt6,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_7,      "PGP 7 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt7,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_8,      "PGP 8 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt8,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_9,      "PGP 9 RX error count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt9,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_10,     "PGP 10 RX error count must be 0",    "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt10,     1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_RX_ERR_CNT_11,     "PGP 11 RX error count must be 0",    "YES",  "1 second", $(PORT),   "",       MonitorRxErrCnt11,     1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_0,       "PGP 0 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt0,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_1,       "PGP 1 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt1,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_2,       "PGP 2 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt2,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_3,       "PGP 3 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt3,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_4,       "PGP 4 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt4,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_5,       "PGP 5 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt5,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_6,       "PGP 6 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt6,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_7,       "PGP 7 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt7,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_8,       "PGP 8 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt8,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_9,       "PGP 9 Pause count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt9,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_10,      "PGP 10 Pause count must be 0",       "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt10,     1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_PAUSE_CNT_11,      "PGP 11 Pause count must be 0",       "YES",  "1 second", $(PORT),   "",       MonitorPauseCnt11,     1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_0,    "PGP 0 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt0,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_1,    "PGP 1 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt1,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_2,    "PGP 2 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt2,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_3,    "PGP 3 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt3,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_4,    "PGP 4 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt4,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_5,    "PGP 5 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt5,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_6,    "PGP 6 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt6,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_7,    "PGP 7 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt7,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_8,    "PGP 8 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt8,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_9,    "PGP 9 Overflow count must be 0",     "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt9,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_10,   "PGP 10 Overflow count must be 0",    "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt10,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_OVERFLOW_CNT_11,   "PGP 11 Overflow count must be 0",    "YES",  "1 second", $(PORT),   "",       MonitorOvflCnt11,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_0,        "PGP 0 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt0,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_1,        "PGP 1 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt1,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_2,        "PGP 2 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt2,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_3,        "PGP 3 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt3,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_4,        "PGP 4 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt4,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_5,        "PGP 5 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt5,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_6,        "PGP 6 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt6,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_7,        "PGP 7 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt7,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_8,        "PGP 8 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt8,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_9,        "PGP 9 Drop count must be 0",         "YES",  "1 second", $(PORT),   "",       MonitorDropCnt9,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_10,       "PGP 10 Drop count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorDropCnt10,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MONITOR_DROP_CNT_11,       "PGP 11 Drop count must be 0",        "YES",  "1 second", $(PORT),   "",       MonitorDropCnt11,      1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MonitorConcExtRxErr0,      "External mitg msg recvr Err Cnt",    "YES",  "1 second", $(PORT),   "",       MonitorConcExtRxErr0,  1,  MAJOR,   "",  NO_ALARM    }
{ $(P), MonitorConcExtRxErr1,      "External mitg msg recvr Err Cnt",    "YES",  "1 second", $(PORT),   "",       MonitorConcExtRxErr1,  1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SoftwareLossCount,         "Software packet loss counter",       "YES",  "1 second", $(PORT),   "",       SoftwareLossCnt,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SoftwareOvflCnt,           "Number of axi-fifo overflows",       "YES",  "1 second", $(PORT),   "",       SoftwareOvflCnt,       1,  MAJOR,   "",  NO_ALARM    }
{ $(P), LASER_BC_VIOLATION_CNT,    "LASER dest BC violation cnt",        "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt0, 1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SC_DIAG0_BC_VIOLATION_CNT, "DIAG0 dest BC violation cnt",        "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt1, 1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SC_BSYD_BC_VIOLATION_CNT,  "DUMPBSY dest BC violation cnt",      "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt2, 1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SC_HXR_BC_VIOLATION_CNT,   "DUMPHXR dest BC violation cnt",      "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt3, 1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SC_SXR_BC_VIOLATION_CNT,   "DUMPSXR dest BC violation cnt",      "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt4, 1,  MAJOR,   "",  NO_ALARM    }
{ $(P), SC_LESA_BC_VIOLATION_CNT,  "LESA dest BC violation cnt",         "YES",  "1 second", $(PORT),   "",       MonitorChrgPowVtnCnt5, 1,  MAJOR,   "",  NO_ALARM    }
}

#======================================
# Registers with ScalVal interfaces
#======================================
# Single register
file "RegisterOutRBVUnits.template" { pattern
{ P,          R,              DESC,                                         PINI,   SCAN,       PORT,      EGU,            PARAM              }
{ $(P), TimeoutTimeRBV,          "Application timeout setting, in usec",    "YES",  "1 second", $(PORT),   "us",     TimeoutTime              }
{ $(P), MonitorConcToutRBV,      "Mitigation Msg Concentrator wdog Tout",   "YES",  "1 second", $(PORT),   "us",     MonitorConcTout          }
{ $(P), SoftwareWdTimeRBV,       "Watchdog timeout setting, in usec",       "YES",  "1 second", $(PORT),   "us",     SoftwareWdTime           }
}

# Single register with AI records
file "RegRO_Analog.template" { pattern
{ R,                           DESC,                                     PINI,   SCAN,           EGU,     LINR,              EGUL,  EGUF,       PREC,    PARAM                   }
{ PGP_RX_MON_BANDWIDTH_0,      "PGP 0 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_0    }
{ PGP_RX_MON_BANDWIDTH_MAX_0,  "PGP 0 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_0 }
{ PGP_RX_MON_BANDWIDTH_MIN_0,  "PGP 0 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_0 }
{ PGP_RX_MON_BANDWIDTH_1,      "PGP 1 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_1    }
{ PGP_RX_MON_BANDWIDTH_MAX_1,  "PGP 1 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_1 }
{ PGP_RX_MON_BANDWIDTH_MIN_1,  "PGP 1 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_1 }
{ PGP_RX_MON_BANDWIDTH_2,      "PGP 2 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_2    }
{ PGP_RX_MON_BANDWIDTH_MAX_2,  "PGP 2 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_2 }
{ PGP_RX_MON_BANDWIDTH_MIN_2,  "PGP 2 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_2 }
{ PGP_RX_MON_BANDWIDTH_3,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_3    }
{ PGP_RX_MON_BANDWIDTH_MAX_3,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_3 }
{ PGP_RX_MON_BANDWIDTH_MIN_3,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_3 }
{ PGP_RX_MON_BANDWIDTH_4,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_4    }
{ PGP_RX_MON_BANDWIDTH_MAX_4,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_4 }
{ PGP_RX_MON_BANDWIDTH_MIN_4,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_4 }
{ PGP_RX_MON_BANDWIDTH_5,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_5    }
{ PGP_RX_MON_BANDWIDTH_MAX_5,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_5 }
{ PGP_RX_MON_BANDWIDTH_MIN_5,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_5 }
{ PGP_RX_MON_BANDWIDTH_6,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_6    }
{ PGP_RX_MON_BANDWIDTH_MAX_6,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_6 }
{ PGP_RX_MON_BANDWIDTH_MIN_6,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_6 }
{ PGP_RX_MON_BANDWIDTH_7,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_7    }
{ PGP_RX_MON_BANDWIDTH_MAX_7,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_7 }
{ PGP_RX_MON_BANDWIDTH_MIN_7,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_7 }
{ PGP_RX_MON_BANDWIDTH_8,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_8    }
{ PGP_RX_MON_BANDWIDTH_MAX_8,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_8 }
{ PGP_RX_MON_BANDWIDTH_MIN_8,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_8 }
{ PGP_RX_MON_BANDWIDTH_9,      "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_9    }
{ PGP_RX_MON_BANDWIDTH_MAX_9,  "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_9 }
{ PGP_RX_MON_BANDWIDTH_MIN_9,  "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_9 }
{ PGP_RX_MON_BANDWIDTH_10,     "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_10   }
{ PGP_RX_MON_BANDWIDTH_MAX_10, "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_10}
{ PGP_RX_MON_BANDWIDTH_MIN_10, "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_10}
{ PGP_RX_MON_BANDWIDTH_11,     "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_11   }
{ PGP_RX_MON_BANDWIDTH_MAX_11, "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_11}
{ PGP_RX_MON_BANDWIDTH_MIN_11, "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_11}
{ PGP_RX_MON_BANDWIDTH_12,     "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_12   }
{ PGP_RX_MON_BANDWIDTH_MAX_12, "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_12}
{ PGP_RX_MON_BANDWIDTH_MIN_12, "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_12}
{ PGP_RX_MON_BANDWIDTH_13,     "PGP 3 Rx Bandwidth",                    "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidth_13   }
{ PGP_RX_MON_BANDWIDTH_MAX_13, "PGP 3 Rx Bandwidth Max",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMax_13}
{ PGP_RX_MON_BANDWIDTH_MIN_13, "PGP 3 Rx Bandwidth Min",                "YES",  "1 second",     "Mbps",   "LINEAR",       "0",      "0.5242880", 3,      PGP_RxMonBandwidthMin_13}
{ APP_TIMEOUT_0,               "Time in 4 ns ticks",                    "YES",  "1 second",     "us"  ,   "LINEAR"        "0",      "262.140"  , 3,      TimeoutSelAppIdMaxCnt0  }
{ APP_TIMEOUT_1,               "Time in 4 ns ticks",                    "YES",  "1 second",     "us"  ,   "LINEAR"        "0",      "262.140"  , 3,      TimeoutSelAppIdMaxCnt1  }
}

# Array of register
file "RegisterArrayIn.template" { pattern
{ P,          R,             DESC,                          NELM,   PINI,      SCAN,       PORT,  PARAM       }
#{ $(P), TimeoutMaskSet,    "1024 Bit Application Mask (Set)",    32,   "No", "Passive",    $(PORT),  TimeoutMask }
}

# Array of 8-bit register as a string
file "RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,  PARAM       }
# Shared
{ $(P), BuildStamp,     "Firmware build string",        256,     "YES",  "Passive",  $(PORT),  BuildStamp }
}

# ENUM register
file "RegisterEnumBIn.template" { pattern
{ P,        R,              DESC,                    PINI,   ZNAM,       ONAM,       SCAN,      PORT, PARAM     }
}

#======================================
# Registers with ScalVal interfaces
#======================================
# Single register
file "RegRW.template" { pattern
{ P,          R,                         DESC,                               PINI,   SCAN,       PORT,      EGU,            PARAM          }
{ $(P), DUAL_CORE_EN,                   "Dual-Core '1' vs. Single-Core '0'", "YES",  "1 second", $(PORT),   "",       DualCoreEn           }
}

#======================================
# Register with ScalVal interfaces
#======================================

file "RegisterOut.template" { pattern
{ P,        R,              DESC,                                       PINI,   SCAN,       PORT,  PARAM       }
{ $(P), ScratchPad,        "Register to test R/W"                        "NO",   "Passive",  $(PORT),    ScratchPad }
{ $(P), RxPolarity,        ""                                            "NO",   "Passive",  $(PORT),    RxPolarity }
{ $(P), ENABLE,            "General Enable. Enables message stream",     "NO",   "Passive",  $(PORT),    Enable     }
{ $(P), Switch,            "Switch the configuration buffer",            "NO",   "Passive",  $(PORT),    Switch     }
{ $(P), SOFTWARE_ENABLE,   "Enable software eval engine updates",        "NO",   "Passive",  $(PORT),    SoftwareEnable     }
{ $(P), EVALUATION_ENABLE, "Enable evaluation engine",                   "NO",   "Passive",  $(PORT),    EvaluationEnable     }
{ $(P), TIMING_CHECK_ENABLE,       "Beam fault enable",                  "NO",   "Passive",  $(PORT),    BeamFaultEn     }
{ $(P), TIMEOUT_ENABLE,    "Enable application timeout engine",          "NO",   "Passive",  $(PORT),    TimeoutEnable     }
{ $(P), SoftwareClear,     "Clear software counters",                    "NO",   "Passive",  $(PORT),    SoftwareClear     }
{ $(P), TimeoutMsgVer,     "MPS Message version (5 bits)",               "NO",   "Passive",  $(PORT),    TimeoutMsgVer  }
{ $(P), TO_APP_SEL_0,      "App ID to monitor timeout",                  "NO",   "Passive",  $(PORT),    ToAppIDSel0  }
{ $(P), TO_APP_SEL_1,      "App ID to monitor timeout",                  "NO",   "Passive",  $(PORT),    ToAppIDSel1  }

}

file "RegisterOutAutosaveAsg.template" { pattern
{ P,        R,              DESC,                                        PINI,    SCAN,       PORT,  EGU,   ASG,        PARAM           }
{ $(P), MonitorConcTout,  "Mitigation Msg Concentrator wdog Tout",      "YES",   "Passive",  $(PORT), "us", $(ASG1),    MonitorConcTout }
{ $(P), SoftwareWdTime,   "Watchdog timeout setting, in usec",          "YES",   "Passive",  $(PORT), "us", $(ASG1),    SoftwareWdTime  }
{ $(P), TimeoutTime,      "Application timeout setting, in usec",       "YES",   "Passive",  $(PORT), "us", $(ASG1),    TimeoutTime     }
}

file "RegisterOutRBV.template" { pattern
{ P,           R,                DESC,                                    PINI,   SCAN,        PORT,       PARAM          }
{ $(P), ScratchPadRBV,           "Register to test R/W",                       "YES",  "1 second",  $(PORT),    ScratchPad      }
{ $(P), RxPolarityRBV,           ""                                            "YES",  "1 second",  $(PORT),    RxPolarity      }
{ $(P), ENABLE_RBV,              "General Enable. Enables message stream",     "YES",  "1 second",  $(PORT),    Enable          }
{ $(P), SwitchRBV,               "Switch the configuration buffer       ",     "YES",  "1 second",  $(PORT),    Switch          }
{ $(P), TIMING_CHECK_ENABLE_RBV, "Beam fault enable",                          "YES",  "1 second",  $(PORT),    BeamFaultEn }
{ $(P), SOFTWARE_ENABLE_RBV,      "Enable software eval engine updates",        "YES",  "1 second",  $(PORT),    SoftwareEnable  }
{ $(P), TIMEOUT_ENABLE_RBV,      "Enable application timeout engine",          "YES",  "1 second",  $(PORT),    TimeoutEnable  }
{ $(P), TimeoutMsgVerRBV,        "MPS Message version (5 bits)",               "YES",  "1 second",  $(PORT),    TimeoutMsgVer  }
{ $(P), EVALUATION_ENABLE_RBV,     "Enable evaluation engine",                   "YES",  "1 second",  $(PORT),    EvaluationEnable  }
{ $(P), TO_APP_SEL_0_RBV,        "App ID to monitor timeout",                  "YES",  "1 second",  $(PORT),    ToAppIDSel0  }
{ $(P), TO_APP_SEL_1_RBV,        "App ID to monitor timeout",                  "YES",  "1 second",  $(PORT),    ToAppIDSel1  }
}

# Array of register
file "RegisterArrayOutRBV.template" { pattern
{ P,    R,             DESC,                                                         NELM,      SCAN, ADDR,    PORT, PARAM         }
{ $(P), EvaluationSwPowerLevel,      "Allowed power levels from software",           2,    "Passive",   1, $(PORT), EvaluationSwPowerLevel }
{ $(P), TimeoutErrIndex,             "Timeout bit status per application",           32,   "Passive",   0, $(PORT), TimeoutErrIndex }
}

# ENUM register
file "RegisterEnumBOut.template" { pattern
{ P,        R,              DESC,        PINI   ZNAM,        ONAM,     SCAN,       PORT, PARAM     }
}

file "RegisterEnumBOutRBV.template" { pattern
{ P,        R,              DESC,         PINI    ZNAM,        ONAM,     SCAN,        PORT, PARAM     }
}

#======================================
# 1-bit Register with ScalVal_RO interfaces
#======================================
file "Reg1BitRO.template" { pattern
{ R,                  DESC,                                     ZNAM,           ONAM,       SCAN,           DTYP,                  PARAM                   }
{ TIM_LINK_STAT       "Timing Rx link status",                  "Non-locked",   "Locked",   "1 second",     "asynInt32",           TIM_RX_LINK             }
{ PGP_RX_PHY_RDY_0,   "Pgp2bAxi 0 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_0        }
{ PGP_TX_PHY_RDY_0,   "Pgp2bAxi 0 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_0        }
{ PGP_RX_LOC_RDY_0,   "Pgp2bAxi 0 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_0  }
{ PGP_RX_REM_RDY_0,   "Pgp2bAxi 0 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_0    }
{ PGP_TX_LINK_RDY_0,  "Pgp2bAxi 0 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_0       }
{ PGP_RX_PHY_RDY_1,   "Pgp2bAxi 1 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_1        }
{ PGP_TX_PHY_RDY_1,   "Pgp2bAxi 1 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_1        }
{ PGP_RX_LOC_RDY_1,   "Pgp2bAxi 1 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_1  }
{ PGP_RX_REM_RDY_1,   "Pgp2bAxi 1 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_1    }
{ PGP_TX_LINK_RDY_1,  "Pgp2bAxi 1 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_1       }
{ PGP_RX_PHY_RDY_2,   "Pgp2bAxi 2 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_2        }
{ PGP_TX_PHY_RDY_2,   "Pgp2bAxi 2 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_2        }
{ PGP_RX_LOC_RDY_2,   "Pgp2bAxi 2 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_2  }
{ PGP_RX_REM_RDY_2,   "Pgp2bAxi 2 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_2    }
{ PGP_TX_LINK_RDY_2,  "Pgp2bAxi 2 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_2       }
{ PGP_RX_PHY_RDY_3,   "Pgp2bAxi 3 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_3        }
{ PGP_TX_PHY_RDY_3,   "Pgp2bAxi 3 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_3        }
{ PGP_RX_LOC_RDY_3,   "Pgp2bAxi 3 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_3  }
{ PGP_RX_REM_RDY_3,   "Pgp2bAxi 3 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_3    }
{ PGP_TX_LINK_RDY_3,  "Pgp2bAxi 3 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_3       }
{ PGP_RX_PHY_RDY_4,   "Pgp2bAxi 4 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_4        }
{ PGP_TX_PHY_RDY_4,   "Pgp2bAxi 4 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_4        }
{ PGP_RX_LOC_RDY_4,   "Pgp2bAxi 4 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_4  }
{ PGP_RX_REM_RDY_4,   "Pgp2bAxi 4 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_4    }
{ PGP_TX_LINK_RDY_4,  "Pgp2bAxi 4 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_4       }
{ PGP_RX_PHY_RDY_5,   "Pgp2bAxi 5 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_5        }
{ PGP_TX_PHY_RDY_5,   "Pgp2bAxi 5 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_5        }
{ PGP_RX_LOC_RDY_5,   "Pgp2bAxi 5 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_5  }
{ PGP_RX_REM_RDY_5,   "Pgp2bAxi 5 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_5    }
{ PGP_TX_LINK_RDY_5,  "Pgp2bAxi 5 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_5       }
{ PGP_RX_PHY_RDY_6,   "Pgp2bAxi 6 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_6        }
{ PGP_TX_PHY_RDY_6,   "Pgp2bAxi 6 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_6        }
{ PGP_RX_LOC_RDY_6,   "Pgp2bAxi 6 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_6  }
{ PGP_RX_REM_RDY_6,   "Pgp2bAxi 6 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_6    }
{ PGP_TX_LINK_RDY_6,  "Pgp2bAxi 6 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_6       }
{ PGP_RX_PHY_RDY_7,   "Pgp2bAxi 7 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_7        }
{ PGP_TX_PHY_RDY_7,   "Pgp2bAxi 7 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_7        }
{ PGP_RX_LOC_RDY_7,   "Pgp2bAxi 7 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_7  }
{ PGP_RX_REM_RDY_7,   "Pgp2bAxi 7 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_7    }
{ PGP_TX_LINK_RDY_7,  "Pgp2bAxi 7 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_7       }
{ PGP_RX_PHY_RDY_8,   "Pgp2bAxi 8 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_8        }
{ PGP_TX_PHY_RDY_8,   "Pgp2bAxi 8 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_8        }
{ PGP_RX_LOC_RDY_8,   "Pgp2bAxi 8 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_8  }
{ PGP_RX_REM_RDY_8,   "Pgp2bAxi 8 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_8    }
{ PGP_TX_LINK_RDY_8,  "Pgp2bAxi 8 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_8       }
{ PGP_RX_PHY_RDY_9,   "Pgp2bAxi 9 RX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_9        }
{ PGP_TX_PHY_RDY_9,   "Pgp2bAxi 9 TX Phy is Ready",             "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_9        }
{ PGP_RX_LOC_RDY_9,   "Pgp2bAxi 9 Rx Local Link Ready",         "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_9  }
{ PGP_RX_REM_RDY_9,   "Pgp2bAxi 9 Rx Remote Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_9    }
{ PGP_TX_LINK_RDY_9,  "Pgp2bAxi 9 Tx Link Ready",               "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_9       }
{ PGP_RX_PHY_RDY_10,  "Pgp2bAxi 10 RX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_10       }
{ PGP_TX_PHY_RDY_10,  "Pgp2bAxi 10 TX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_10       }
{ PGP_RX_LOC_RDY_10,  "Pgp2bAxi 10 Rx Local Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_10 }
{ PGP_RX_REM_RDY_10,  "Pgp2bAxi 10 Rx Remote Link Ready",       "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_10   }
{ PGP_TX_LINK_RDY_10, "Pgp2bAxi 10 Tx Link Ready",              "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_10      }
{ PGP_RX_PHY_RDY_11,  "Pgp2bAxi 11 RX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_11       }
{ PGP_TX_PHY_RDY_11,  "Pgp2bAxi 11 TX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_11       }
{ PGP_RX_LOC_RDY_11,  "Pgp2bAxi 11 Rx Local Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_11 }
{ PGP_RX_REM_RDY_11,  "Pgp2bAxi 11 Rx Remote Link Ready",       "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_11   }
{ PGP_TX_LINK_RDY_11, "Pgp2bAxi 11 Tx Link Ready",              "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_11      }
{ PGP_RX_PHY_RDY_12,  "Pgp2bAxi 12 RX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_12       }
{ PGP_TX_PHY_RDY_12,  "Pgp2bAxi 12 TX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_12       }
{ PGP_RX_LOC_RDY_12,  "Pgp2bAxi 12 Rx Local Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_12 }
{ PGP_RX_REM_RDY_12,  "Pgp2bAxi 12 Rx Remote Link Ready",       "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_12   }
{ PGP_TX_LINK_RDY_12, "Pgp2bAxi 12 Tx Link Ready",              "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_12      }
{ PGP_RX_PHY_RDY_13,  "Pgp2bAxi 13 RX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxPhyReady_13       }
{ PGP_TX_PHY_RDY_13,  "Pgp2bAxi 13 TX Phy is Ready",            "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxPhyReady_13       }
{ PGP_RX_LOC_RDY_13,  "Pgp2bAxi 13 Rx Local Link Ready",        "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxLocalLinkReady_13 }
{ PGP_RX_REM_RDY_13,  "Pgp2bAxi 13 Rx Remote Link Ready",       "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_RxRemLinkReady_13   }
{ PGP_TX_LINK_RDY_13, "Pgp2bAxi 13 Tx Link Ready",              "Not ready",    "Ready",    "1 second",     "asynUInt32Digital",   PGP_TxLinkReady_13      }
}

#======================================
# 1-bit Register with ScalVal interfaces
#======================================
file "Reg1BitRW.template" { pattern
{ R,                  DESC,                                     ZNAM,       ONAM,       SCAN,          PARAM                    }
{ TIM_CLK_SRC,        "Timinig source",                         "NC",       "SC",       "1 second",    TIM_CLK_SEL              }
{ BeamFaultClr,       "Beam fault clear strobe"                 "Clear",    "Clear",    "1 second",    BeamFaultClr             }
}

#======================================
# 2-bit Register with ScalVal interfaces
#======================================
file "Reg2BitsRW.template" { pattern
{ R,              DESC,                                     ZRST,       ONST,       TWST,           THST,       SCAN,          PARAM                     }
{ TIM_SRC_RTM0,   "Timing source for RTM #0",               "RTM_0",    "FPGA",     "Backplane",    "RTM_1",    "1 second",    TIM_CB_OUT_0              }
{ TIM_SRC_FPGA,   "Timing source for FPGA",                 "RTM_0",    "FPGA",     "Backplane",    "RTM_1",    "1 second",    TIM_CB_OUT_1              }
{ TIM_SRC_BP,     "Timing source for Backplane",            "RTM_0",    "FPGA",     "Backplane",    "RTM_1",    "1 second",    TIM_CB_OUT_2              }
{ TIM_SRC_RTM1,   "Timing source for RTM #1",               "RTM_0",    "FPGA",     "Backplane",    "RTM_1",    "1 second",    TIM_CB_OUT_3              }
#{ DUAL_CORE_EN,   "Dual-Core '1' vs. Single-Core '0'",      "Single",   "PGP 1",    "PGP 0",        "Both PGP", "1 second",    DualCoreEn                }
}

#======================================
# Register with DoubleVal_RO interfaces
#======================================

file "RegisterDoubleIn.template" { pattern
{ P,              R,            DESC,                         PINI,   SCAN,        PORT,   EGU,    PARAM    }
}

#======================================
# Register with DoubleVal interfaces
#======================================

file "RegisterDoubleOut.template" { pattern
{ P,              R,         DESC,                            PINI,  SCAN,        PORT,     EGU,    PARAM   }
}

file "RegisterDoubleOutRBV.template" { pattern
{ P,              R,         DESC,                            PINI,   SCAN,       PORT,     EGU,    PARAM   }
}

#======================================
# Register with Command interfaces
#======================================
file "RegisterCommand.template" { pattern
{ P,            R,            DESC,                            PINI,   SCAN,       PORT,   PARAM   }
{ $(P), PGP_CNTRST_0,     "Pgp2bAxi 0 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_0  }
{ $(P), PGP_CNTRST_1,     "Pgp2bAxi 1 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_1  }
{ $(P), PGP_CNTRST_2,     "Pgp2bAxi 2 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_2  }
{ $(P), PGP_CNTRST_3,     "Pgp2bAxi 3 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_3  }
{ $(P), PGP_CNTRST_4,     "Pgp2bAxi 4 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_4  }
{ $(P), PGP_CNTRST_5,     "Pgp2bAxi 5 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_5  }
{ $(P), PGP_CNTRST_6,     "Pgp2bAxi 6 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_6  }
{ $(P), PGP_CNTRST_7,     "Pgp2bAxi 7 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_7  }
{ $(P), PGP_CNTRST_8,     "Pgp2bAxi 8 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_8  }
{ $(P), PGP_CNTRST_9,     "Pgp2bAxi 9 reset counters",         "NO",   "Passive",  $(PORT),    PGP_ResetCounters_9  }
{ $(P), PGP_CNTRST_10,    "Pgp2bAxi 10 reset counters",        "NO",   "Passive",  $(PORT),    PGP_ResetCounters_10 }
{ $(P), PGP_CNTRST_11,    "Pgp2bAxi 11 reset counters",        "NO",   "Passive",  $(PORT),    PGP_ResetCounters_11 }
{ $(P), PGP_CNTRST_12,    "Pgp2bAxi 12 reset counters",        "NO",   "Passive",  $(PORT),    PGP_ResetCounters_12 }
{ $(P), PGP_CNTRST_13,    "Pgp2bAxi 13 reset counters",        "NO",   "Passive",  $(PORT),    PGP_ResetCounters_13 }
}


#======================================
# Register with Stream interfaces
#======================================

file "RegisterStream.template" {pattern
{ P,            R,          DESC,               NELM,       PINI,   PORT,   PARAM       }
}

# For Stream interfaces, an additional parameter is automatically created
# and the name is generated adding ":16" to the original parameter name
# This gives access to the same stream data, but as 16-bit words which
# is the case for ADC samples for example. Note that the NELM is 2x

file "RegisterStream16.template" {pattern
{ P,            R,          DESC,                           NELM,        PINI,  PORT,  PARAM         }


file "beam_class_calculation.template" {pattern,
{P,   BC}
{$(P),"0"}
{$(P),"1"}
{$(P),"2"}
{$(P),"3"}
{$(P),"4"}
{$(P),"5"}
{$(P),"6"}
{$(P),"7"}
{$(P),"8"}
{$(P),"9"}
{$(P),"10"}
{$(P),"11"}
{$(P),"12"}
{$(P),"13"}
{$(P),"14"}
{$(P),"15"}
}

file "Reg1BitRW_int.template" { pattern
{ R,                  DESC,                                     ZNAM,       ONAM,       SCAN,                     PARAM                    }
{ TIMING_RX_ERR,      "TPR Rx Err: 1=Err",                      "OK",       "Error",    "1 second",               RxDown                   }
}
