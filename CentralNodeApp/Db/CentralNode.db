record(stringout, "$(IOC):CONFIG_LOAD") {
    field(DESC, "Load Algorithm")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_LOAD")
}

record(stringout, "$(IOC):Test:DEVICE_INPUT") {
    field(DESC, "Load values for device inputs (digital)")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_DEVICE_INPUT")
}

record(stringout, "$(IOC):Test:ANALOG_DEVICE") {
    field(DESC, "Load test file for analog devices")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_ANALOG_DEVICE")
}

record(stringin, "$(IOC):FW_BUILD_STAMP") {
    field(DESC, "Central node firmware build stamp")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_FW_BUILD_STAMP_STRING")
}

record(longout, "$(IOC):Test:CHECK_FAULTS") {
    field(DESC, "Run engine evaluation one time")
    field(DTYP, "asynInt32")
    field(VAL, "0")
    field(PINI, "YES")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_CHECK_FAULTS")
}

record(longout, "$(IOC):Test:CHECK_BYPASS") {
    field(DESC, "Check bypass queue one time")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_CHECK_BYPASS")
}

record(longout, "$(IOC):UNLATCHALL") {
    field(DESC, "Unlatch all faults and inputs")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)MPS_UNLATCH_ALL")
}

record(bo, "$(IOC):ENABLE") {
    field(DESC, "Enable Central Node")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_ENABLE")
}

record(bo, "$(IOC):EVALUATION_ENABLE") {
    field(DESC, "Enable Central Node")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_EVALUATION_ENABLE")
}

record(bo, "$(IOC):MITIGATION_UNLH") {
    field(DESC, "Unlatch mitigation")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_MITIGATION_UNLATCH")
}

record(bi, "$(IOC):ENABLE_RBV") {
    field(DESC, "Enable Central Node (RBV)")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(ZSV, "MAJOR")
    field(OSV, "NO_ALARM")
    field(INP, "@asynMask(CENTRAL_NODE 1 1 0)MPS_ENABLE_RBV")
}

record(bi, "$(IOC):EVALUATION_ENABLE_RBV") {
    field(DESC, "Enable Eval Central Node (RBV)")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(ZSV, "MAJOR")
    field(OSV, "NO_ALARM")
    field(INP, "@asynMask(CENTRAL_NODE 1 1 0)MPS_EVALUATION_ENABLE_RBV")
}

record(bo, "$(IOC):SW_ENABLE") {
    field(DESC, "Enable Central Node Software")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_SW_ENABLE")
}

record(bi, "$(IOC):SW_ENABLE_RBV") {
    field(DESC, "Enable Central Node Software (RBV)")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(ZSV, "MAJOR")
    field(OSV, "NO_ALARM")
    field(INP, "@asynMask(CENTRAL_NODE 1 1 0)MPS_SW_ENABLE_RBV")
}

record(longin, "$(IOC):FAULT_REASON") {
    field(DESC, "Fault reason bit mask")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FAULT_REASON")
}

record(longin, "$(IOC):SW_UPDATE_RATE") {
    field(DESC, "Software evaluation engine rate")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "Hz")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_SW_UPDATE_RATE")
}

record(longin, "$(IOC):SW_UPDATE_COUNTER") {
    field(DESC, "Software evaluation engine counter")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_SW_UPDATE_COUNTER")
}

record(bo, "$(IOC):TIMING_CHECK_ENABLE") {
    field(DESC, "Enable timing pattern check")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_TIMING_CHECK_ENABLE")
}

record(bi, "$(IOC):TIMING_CHECK_ENABLE_RBV") {
    field(DESC, "Enable timing pattern check (RBV)")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(ZSV, "MAJOR")
    field(OSV, "NO_ALARM")
    field(INP, "@asynMask(CENTRAL_NODE 1 1 0)MPS_TIMING_CHECK_ENABLE_RBV")
}

record(bo, "$(IOC):TIMEOUT_ENABLE") {
    field(DESC, "Timeout enable")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_TIMEOUT_ENABLE")
}

record(bi, "$(IOC):TIMEOUT_ENABLE_RBV") {
    field(DESC, "Timeout enable RBV")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(ZSV, "MAJOR")
    field(OSV, "NO_ALARM")
    field(INP, "@asynMask(CENTRAL_NODE 1 1 0)MPS_TIMEOUT_ENABLE_RBV")
}

#record(bi, "$(IOC):TIMEOUT_ERROR_STATUS") {
#    field(DESC, "EIC BPM01/BPM02 [L2KA00-0517 S3]")
#    field(DTYP, "asynUInt32Digital")
#    field(SCAN, "1 second")
#    field(ZNAM, "OFFLINE")
#    field(ONAM, "ONLINE")
#    field(ZSV, "MAJOR")
#    field(OSV, "NO_ALARM")
#    field(INP, "@asynMask(CENTRAL_NODE 3 1 0)MPS_TIMEOUT_ERROR_STATUS")
#}

record(stringin, "$(IOC):ENGINE_START_TIME_STR") {
    field(DESC, "Engine start time (config load time)")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_ENGINE_START_TIME_STRING")
}

record(bo, "$(IOC):MON_ERR_CLR") {
    field(DESC, "Monitor Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_MON_ERR_CLEAR")
}

record(bo, "$(IOC):SW_ERR_CLR") {
    field(DESC, "Software Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_SW_ERR_CLEAR")
}

record(bo, "$(IOC):TO_ERR_CLR") {
    field(DESC, "Timeout Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_TO_ERR_CLEAR")
}

record(bo, "$(IOC):MO_CONC_ERR_CLR") {
    field(DESC, "Monitor Conc Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_MO_CONC_ERR_CLEAR")
}

record(bo, "$(IOC):BEAM_FAULT_CLR") {
    field(DESC, "Beam Fault Clear [PC and Charge violation]")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_BEAM_FAULT_CLEAR")
}

record(longin, "$(IOC):EVAL_AVG_TIME") {
    field(DESC, "Slow engine average exec time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVAL_AVG_TIME")
}

record(longin, "$(IOC):EVAL_MAX_TIME") {
    field(DESC, "Slow engine max exec time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVAL_MAX_TIME")
}

record(longin, "$(IOC):EVALCYCLE_AVG_TIME") {
    field(DESC, "Slow engine average cycle time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVALCYCLE_AVG_TIME")
}

record(longin, "$(IOC):EVALCYCLE_MAX_TIME") {
    field(DESC, "Slow engine max cycle time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVALCYCLE_MAX_TIME")
}

record(longin, "$(IOC):UPDATE_AVG_TIME") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_UPDATE_AVG_TIME")
}

record(longin, "$(IOC):UPDATE_MAX_TIME") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_UPDATE_MAX_TIME")
}

record(bo, "$(IOC):UPDATE_TIME_CLR") {
    field(DESC, "Clear slow engine input time tracker")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_UPDATE_TIME_CLEAR")
}

record(longin, "$(IOC):FWUPDATE_AVG_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FWUPDATE_AVG_PERIOD")
}

record(longin, "$(IOC):FWUPDATE_MAX_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FWUPDATE_MAX_PERIOD")
}

record(longin, "$(IOC):WDUPDATE_AVG_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_WDUPDATE_AVG_PERIOD")
}

record(longin, "$(IOC):WDUPDATE_MAX_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_WDUPDATE_MAX_PERIOD")
}

record(longin, "$(IOC):UPDATE_TIME_LOW") {
    field(DESC, "Input update timestamp (low 32-bits)")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_APP_TIMESTAMP_LOW_BITS")
}

record(longin, "$(IOC):UPDATE_TIME_HIGH") {
    field(DESC, "Input update timestamp (high 32-bits)")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_APP_TIMESTAMP_HIGH_BITS")
}

record(longin, "$(IOC):MPS_STATE") {
    field(DESC, "Status Central Node IOC State")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_STATE")
}

record(stringin, "$(IOC):CONFIG_DB_SRC") {
    field(DESC, "Database configuration source")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_SRC")
}

record(stringin, "$(IOC):CONFIG_DB_DATE") {
    field(DESC, "Database configuration date")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_DATE")
}

record(stringin, "$(IOC):CONFIG_DB_USER") {
    field(DESC, "Who generated YAML database")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_USER")
}

record(stringin, "$(IOC):CONFIG_DB_MD5SUM") {
    field(DESC, "Md5sum of source database")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_MD5SUM")
}

record(longin, "$(IOC):SoftwareWdErrorCounter") {
    field(DESC, "Inc. when software wd error is non-zero")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FW_SOFTWARE_WDOG_COUNTER")
}

record(longin, "$(IOC):MonitorNotReadyCounter") {
    field(DESC, "Increases when FW not ready for beam")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "usec")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FW_MONITOR_NOT_READY_COUNTER")
}

record(bo, "$(IOC):SKIP_HEARTBEAT") {
    field(DESC, "For test only - disable SW/FW heartbeats")
    field(DTYP, "asynUInt32Digital")
    field(VAL, "0")
    field(PINI, "YES")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_SKIP_HEARTBEAT")
}

record(bo, "$(IOC):DISABLE_BEAM") {
    field(DESC, "Enable/Disable gun shutter")
    field(DTYP, "asynUInt32Digital")
    field(VAL, "1")
    field(PINI, "YES")
    field(ZNAM, "Shutter Allowed")
    field(ONAM, "Shutter Disabled")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_FORCE_LINAC_PC0")
}

record(bo, "$(IOC):DISABLE_AOM") {
    field(DESC, "Enable/Disable AOM")
    field(DTYP, "asynUInt32Digital")
    field(VAL, "1")
    field(PINI, "YES")
    field(ZNAM, "AOM Allowed")
    field(ONAM, "AOM Disabled")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_FORCE_AOM_PC0")
}

record(bi, "$(IOC):SW_LOSS_ERROR") {
    field(INP, "$(IOC):SoftwareLossError")
    field(PINI, "YES")
    field(ZNAM, "OK")
    field(ONAM, "SW_LOSS_ERROR")
    field(OSV, "MAJOR")
    field(ZSV, "NO_ALARM")
}

record(bi, "$(IOC):SW_WD_ERROR") {
    field(INP, "$(IOC):SoftwareWdError")
    field(PINI, "YES")
    field(ZNAM, "OK")
    field(ONAM, "SW_WD_ERROR")
    field(OSV, "MAJOR")
    field(ZSV, "NO_ALARM")
}

record(calcout, "$(IOC):LINAC_TM_PC") {
  field(INPA, "$(IOC):ConPowL")
  field(SCAN, "1 second")
  field(DESC, "LINAC Power Class to timing")
  field(CALC, "A & 0xF")
  field(LLSV, "MAJOR")
}