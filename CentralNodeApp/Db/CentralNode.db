record(stringout, "$(IOC):CONFIG_LOAD") {
    field(DESC, "Load Algorithm")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_LOAD")
    field(ASG,  "$(ASG1)")
}

record(stringout, "$(IOC):Test:DEVICE_INPUT") {
    field(DESC, "Load values for device inputs (digital)")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_DEVICE_INPUT")
}

record(stringout, "$(IOC):Test:ANALOG_DEVICE") {
    field(DESC, "Load test file for analog devices")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_ANALOG_DEVICE")
}

record(stringin, "$(IOC):FW_BUILD_STAMP") {
    field(DESC, "Central node firmware build stamp")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_FW_BUILD_STAMP_STRING")
}

record(longout, "$(IOC):Test:CHECK_FAULTS") {
    field(DESC, "Run engine evaluation one time")
    field(DTYP, "asynInt32")
    field(VAL, "0")
    field(PINI, "YES")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_CHECK_FAULTS")
}

record(longout, "$(IOC):Test:CHECK_BYPASS") {
    field(DESC, "Check bypass queue one time")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(CENTRAL_NODE 0 0)TEST_CHECK_BYPASS")
}

record(longout, "$(IOC):UNLATCHALL") {
    field(DESC, "Unlatch all faults and inputs")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CENTRAL_NODE 0 0)MPS_UNLATCH_ALL")
    field(DOL,  "$(GLOBAL):UNLATCHALL CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):MITIGATION_UNLH") {
    field(DESC, "Unlatch mitigation")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_MITIGATION_UNLATCH")
    field(ASG,  "$(ASG1)")
}

record(longin, "$(IOC):SW_UPDATE_RATE") {
    field(DESC, "Software evaluation engine rate")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "Hz")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_SW_UPDATE_RATE")
    field(HIGH, "361")
    field(HSV,  "MINOR")
    field(HIHI, "362")
    field(HHSV, "MAJOR")
    field(LOW,  "359")
    field(LSV,  "MINOR")
    field(LOLO, "358")
    field(LLSV, "MAJOR")
}

record(longin, "$(IOC):SW_UPDATE_COUNTER") {
    field(DESC, "Software evaluation engine counter")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_SW_UPDATE_COUNTER")
}

#record(bi, "$(IOC):TIMEOUT_ERROR_STATUS") {
#    field(DESC, "EIC BPM01/BPM02 [L2KA00-0517 S3]")
#    field(DTYP, "asynUInt32Digital")
#    field(SCAN, "1 second")
#    field(ZNAM, "OFFLINE")
#    field(ONAM, "ONLINE")
#    field(ZSV, "MAJOR")
#    field(OSV, "NO_ALARM")
#    field(INP, "@asynMask(CENTRAL_NODE 3 1 0)MPS_TIMEOUT_ERROR_STATUS")
#}

record(stringin, "$(IOC):ENGINE_START_TIME_STR") {
    field(DESC, "Engine start time (config load time)")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_ENGINE_START_TIME_STRING")
}

record(bo, "$(IOC):MON_ERR_CLR") {
    field(DESC, "Monitor Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_MON_ERR_CLEAR")
    field(DOL,  "$(GLOBAL):MON_ERR_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):SW_ERR_CLR") {
    field(DESC, "Software Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_SW_ERR_CLEAR")
    field(DOL,  "$(GLOBAL):SW_ERR_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):TO_ERR_CLR") {
    field(DESC, "Timeout Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_TO_ERR_CLEAR")
    field(DOL,  "$(GLOBAL):TO_ERR_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):MO_CONC_ERR_CLR") {
    field(DESC, "Monitor Conc Error Clear Cmd")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_MO_CONC_ERR_CLEAR")
    field(DOL,  "$(GLOBAL):MO_CONC_ERR_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):BEAM_FAULT_CLR") {
    field(DESC, "Beam Fault Clear [PC and Charge fault]")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_BEAM_FAULT_CLEAR")
    field(DOL,  "$(GLOBAL):BEAM_FAULT_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(bo, "$(IOC):RESET_ALL") {
    field(DESC, "Reset ALL FW latches")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_FW_RESET_ALL")
    field(DOL,  "$(GLOBAL):RESET_ALL CPP MSI")
    field(OMSL, "closed_loop")
}

record(longin, "$(IOC):EVAL_AVG_TIME") {
    field(DESC, "Slow engine average exec time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVAL_AVG_TIME")
}

record(longin, "$(IOC):EVAL_MAX_TIME") {
    field(DESC, "Slow engine max exec time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVAL_MAX_TIME")
}

record(longin, "$(IOC):EVALCYCLE_AVG_TIME") {
    field(DESC, "Slow engine average cycle time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVALCYCLE_AVG_TIME")
}

record(longin, "$(IOC):EVALCYCLE_MAX_TIME") {
    field(DESC, "Slow engine max cycle time")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_EVALCYCLE_MAX_TIME")
}

record(longin, "$(IOC):UPDATE_AVG_TIME") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_UPDATE_AVG_TIME")
}

record(longin, "$(IOC):UPDATE_MAX_TIME") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_UPDATE_MAX_TIME")
}

record(bo, "$(IOC):UPDATE_TIME_CLR") {
    field(DESC, "Clear slow engine input time tracker")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_UPDATE_TIME_CLEAR")
    field(DOL,  "$(GLOBAL):UPDATE_TIME_CLR CPP MSI")
    field(OMSL, "closed_loop")
}

record(longin, "$(IOC):FWUPDATE_AVG_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FWUPDATE_AVG_PERIOD")
}

record(longin, "$(IOC):FWUPDATE_MAX_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FWUPDATE_MAX_PERIOD")
}

record(longin, "$(IOC):WDUPDATE_AVG_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_WDUPDATE_AVG_PERIOD")
}

record(longin, "$(IOC):WDUPDATE_MAX_PERIOD") {
    field(DESC, "")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_WDUPDATE_MAX_PERIOD")
}

record(longin, "$(IOC):UPDATE_TIME_LOW") {
    field(DESC, "Input update timestamp (low 32-bits)")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_APP_TIMESTAMP_LOW_BITS")
}

record(longin, "$(IOC):UPDATE_TIME_HIGH") {
    field(DESC, "Input update timestamp (high 32-bits)")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_APP_TIMESTAMP_HIGH_BITS")
}

record(longin, "$(IOC):MPS_STATE") {
    field(DESC, "Status Central Node IOC State")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 1)MPS_STATE")
}

record(stringin, "$(IOC):CONFIG_DB_SRC") {
    field(DESC, "Database configuration source")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_SRC")
}

record(stringin, "$(IOC):CONFIG_DB_DATE") {
    field(DESC, "Database configuration date")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_DATE")
}

record(stringin, "$(IOC):CONFIG_DB_USER") {
    field(DESC, "Who generated YAML database")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_USER")
}

record(stringin, "$(IOC):CONFIG_DB_MD5SUM") {
    field(DESC, "Md5sum of source database")
    field(DTYP, "asynOctetRead")
    field(SCAN, "1 second")
    field(INP, "@asyn(CENTRAL_NODE 0 0)MPS_CONFIG_DB_MD5SUM")
}

record(longin, "$(IOC):SoftwareWdErrorCounter") {
    field(DESC, "Inc. when software wd error is non-zero")
    field(DTYP, "asynInt32")
    field(SCAN, "1 second")
    field(EGU, "us")
    field(INP, "@asyn(CENTRAL_NODE 1 0)MPS_FW_SOFTWARE_WDOG_COUNTER")
}

record(bo, "$(IOC):SKIP_HEARTBEAT") {
    field(DESC, "For test only - disable SW/FW heartbeats")
    field(DTYP, "asynUInt32Digital")
    field(VAL, "0")
    field(PINI, "YES")
    field(OUT, "@asynMask(CENTRAL_NODE 1 1 0)MPS_SKIP_HEARTBEAT")
}

record(bi, "$(IOC):SW_LOSS_ERROR") {
    field(INP, "$(IOC):SoftwareLossError")
    field(PINI, "YES")
    field(ZNAM, "OK")
    field(ONAM, "SW_LOSS_ERROR")
    field(OSV, "MAJOR")
    field(ZSV, "NO_ALARM")
    field(SCAN, "1 second")
}

record(bi, "$(IOC):SW_WD_ERROR") {
    field(INP, "$(IOC):SoftwareWdError")
    field(PINI, "YES")
    field(ZNAM, "OK")
    field(ONAM, "SW_WD_ERROR")
    field(OSV, "MAJOR")
    field(ZSV, "NO_ALARM")
    field(SCAN, "1 second")
}

record(calc, "$(IOC):MONITOR_RX_ERR_CNT") {
    field(DESC, "Monitor Rx Err Cnt Must be 0")
    field(CALC, "A+B+C+D+E+F+G+H+I+J+K+L")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_RX_ERR_CNT_0")
    field(INPB, "$(IOC):MONITOR_RX_ERR_CNT_1")
    field(INPC, "$(IOC):MONITOR_RX_ERR_CNT_2")
    field(INPD, "$(IOC):MONITOR_RX_ERR_CNT_3")
    field(INPE, "$(IOC):MONITOR_RX_ERR_CNT_4")
    field(INPF, "$(IOC):MONITOR_RX_ERR_CNT_5")
    field(INPG, "$(IOC):MONITOR_RX_ERR_CNT_6")
    field(INPH, "$(IOC):MONITOR_RX_ERR_CNT_7")
    field(INPI, "$(IOC):MONITOR_RX_ERR_CNT_8")
    field(INPJ, "$(IOC):MONITOR_RX_ERR_CNT_9")
    field(INPK, "$(IOC):MONITOR_RX_ERR_CNT_10")
    field(INPL, "$(IOC):MONITOR_RX_ERR_CNT_11")
    field(HIGH, "1")
    field(HSV,  "MAJOR")
}

record(calc, "$(IOC):MONITOR_RX_ERR") {
    field(DESC, "Monitor Rx Err")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_RX_ERR_CNT")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(calc, "$(IOC):MONITOR_PAUSE_CNT") {
    field(DESC, "Monitor Pause Cnt Must be 0")
    field(CALC, "A+B+C+D+E+F+G+H+I+J+K+L")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_PAUSE_CNT_0")
    field(INPB, "$(IOC):MONITOR_PAUSE_CNT_1")
    field(INPC, "$(IOC):MONITOR_PAUSE_CNT_2")
    field(INPD, "$(IOC):MONITOR_PAUSE_CNT_3")
    field(INPE, "$(IOC):MONITOR_PAUSE_CNT_4")
    field(INPF, "$(IOC):MONITOR_PAUSE_CNT_5")
    field(INPG, "$(IOC):MONITOR_PAUSE_CNT_6")
    field(INPH, "$(IOC):MONITOR_PAUSE_CNT_7")
    field(INPI, "$(IOC):MONITOR_PAUSE_CNT_8")
    field(INPJ, "$(IOC):MONITOR_PAUSE_CNT_9")
    field(INPK, "$(IOC):MONITOR_PAUSE_CNT_10")
    field(INPL, "$(IOC):MONITOR_PAUSE_CNT_11")
    field(HIGH, "1")
    field(HSV,  "MAJOR")
}

record(calc, "$(IOC):MONITOR_PAUSE") {
    field(DESC, "Monitor Pause")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_PAUSE_CNT")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(calc, "$(IOC):MONITOR_OVERFLOW_CNT") {
    field(DESC, "Monitor Overflow Cnt Must be 0")
    field(CALC, "A+B+C+D+E+F+G+H+I+J+K+L")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_OVERFLOW_CNT_0")
    field(INPB, "$(IOC):MONITOR_OVERFLOW_CNT_1")
    field(INPC, "$(IOC):MONITOR_OVERFLOW_CNT_2")
    field(INPD, "$(IOC):MONITOR_OVERFLOW_CNT_3")
    field(INPE, "$(IOC):MONITOR_OVERFLOW_CNT_4")
    field(INPF, "$(IOC):MONITOR_OVERFLOW_CNT_5")
    field(INPG, "$(IOC):MONITOR_OVERFLOW_CNT_6")
    field(INPH, "$(IOC):MONITOR_OVERFLOW_CNT_7")
    field(INPI, "$(IOC):MONITOR_OVERFLOW_CNT_8")
    field(INPJ, "$(IOC):MONITOR_OVERFLOW_CNT_9")
    field(INPK, "$(IOC):MONITOR_OVERFLOW_CNT_10")
    field(INPL, "$(IOC):MONITOR_OVERFLOW_CNT_11")
    field(HIGH, "1")
    field(HSV,  "MAJOR")
}

record(calc, "$(IOC):MONITOR_OVERFLOW") {
    field(DESC, "Monitor Overflow")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_OVERFLOW_CNT")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(calc, "$(IOC):MONITOR_DROP_CNT") {
    field(DESC, "Monitor Drop Cnt Must be 0")
    field(CALC, "A+B+C+D+E+F+G+H+I+J+K+L")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_DROP_CNT_0")
    field(INPB, "$(IOC):MONITOR_DROP_CNT_1")
    field(INPC, "$(IOC):MONITOR_DROP_CNT_2")
    field(INPD, "$(IOC):MONITOR_DROP_CNT_3")
    field(INPE, "$(IOC):MONITOR_DROP_CNT_4")
    field(INPF, "$(IOC):MONITOR_DROP_CNT_5")
    field(INPG, "$(IOC):MONITOR_DROP_CNT_6")
    field(INPH, "$(IOC):MONITOR_DROP_CNT_7")
    field(INPI, "$(IOC):MONITOR_DROP_CNT_8")
    field(INPJ, "$(IOC):MONITOR_DROP_CNT_9")
    field(INPK, "$(IOC):MONITOR_DROP_CNT_10")
    field(INPL, "$(IOC):MONITOR_DROP_CNT_11")
    field(HIGH, "1")
    field(HSV,  "MAJOR")
}

record(calc, "$(IOC):MONITOR_DROP") {
    field(DESC, "Monitor Drop")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MONITOR_DROP_CNT")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(calc, "$(IOC):SW_ERR") {
    field(DESC, "Monitor Drop")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):SoftwareLossError")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(calc, "$(IOC):TO_ERR") {
    field(DESC, "Monitor Drop")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):TimeoutErrStatus")
    field(LOW, "0")
    field(LSV, "MAJOR")
}

record(mbbo, "$(IOC):CN_CHAIN_EN") {
  field(DTYP, "Raw Soft Channel")
  field(SCAN, "Passive")
  field(OMSL, "closed_loop")
  field(DOL,  "$(GLOBAL):CN_CHAIN_EN CPP MSI")
  field(OUT,  "$(IOC):DUAL_CORE_EN")
  field(FLNK, "$(IOC):DUAL_CORE_EN")
  field(ZRVL, "0")
  field(ZRST, "Off")
  field(ONVL, "1")
  field(ONST, "Input 0")
  field(TWVL, "2")
  field(TWST, "Input 1")
  field(THVL, "3")
  field(THST, "Input 0 & 1")
}

record(mbbi, "$(IOC):CN_CHAIN_EN_RBV") {
  field(DTYP, "Raw Soft Channel")
  field(SCAN, "1 second")
  field(INP,  "$(IOC):DUAL_CORE_EN_RBV")
  field(ZRVL, "0")
  field(ZRST, "Off")
  field(ZRSV, "MAJOR")
  field(ONVL, "1")
  field(ONST, "Input 0")
  field(ONSV, "MINOR")
  field(TWVL, "2")
  field(TWST, "Input 1")
  field(TWSV, "MINOR")
  field(THVL, "3")
  field(THST, "Input 0 & 1")
  field(THSV, "NO_ALARM")
}

record(mbbi, "$(IOC):CN_CHAIN_ERR") {
  field(DTYP, "Raw Soft Channel")
  field(SCAN, "1 second")
  field(INP,  "$(IOC):MonitorConcWdErr")
  field(ZRVL, "0")
  field(ZRST, "No Error")
  field(ZRSV, "NO_ALARM")
  field(ONVL, "2")
  field(ONST, "Input 0 Broken")
  field(ONSV, "MAJOR")
  field(TWVL, "8")
  field(TWST, "Input 1 Broken")
  field(TWSV, "MAJOR")
  field(THVL, "10")
  field(THST, "Both Inputs Broken")
  field(THSV, "MAJOR")
}

record(calc, "$(IOC):CONC_ERROR_CALC") {
    field(DESC, "Monitor Drop Cnt Must be 0")
    field(CALC, "((A+B+C+D)=0)?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MonitorConcExtRxErr0")
    field(INPB, "$(IOC):MonitorConcExtRxErr1")
    field(INPC, "$(IOC):MonitorConcStallErr")
    field(INPD, "$(IOC):MonitorConcWdErr")
    field(FLNK, "$(IOC):MON_CONC_READY")
}

record(bi,  "$(IOC):MON_CONC_READY") {
    field(DESC, "CN Concentrator Ready")
    field(ZNAM, "Not Ready")
    field(ZSV,  "MAJOR")
    field(ONAM, "Ready")
    field(OSV,  "NO_ALARM")
    field(INP,  "$(IOC):CONC_ERROR_CALC NPP MSI")
}

record(calc, "$(IOC):MON_CONC_WD_ERR") {
    field(DESC, "CN Concentrator WD Error")
    field(CALC, "A<1?1:0")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(INPA, "$(IOC):MonitorConcWdErr")
    field(LOW, "0")
    field(LSV, "MAJOR")
}    

record(bi, "$(IOC):ALL_APP_STATUS_RBV") {
    field(DESC, "All Applications Status")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "1 second")
    field(ZNAM, "App Timeouts Disabled")
    field(ONAM, "Normal Operation")
    field(ZSV,  "MAJOR")
    field(OSV,  "NO_ALARM")
    field(INP,  "@asynMask(CENTRAL_NODE 1 1 0)MPS_TEST_MODE")
    field(VAL,  "0")
}

record(mbbo, "$(IOC):MAX_PERMIT") {
    field(DESC, "Set BC to 120Hz max")
    field(DTYP, "asynUInt32Digital")
    field(PINI, "YES")
    field(OUT,  "@asynMask(CENTRAL_NODE 3 1 0)MPS_MAX_BEAM_CLASS")
    field(DOL,  "$(GLOBAL):MAX_PERMIT CPP MSI")
    field(OMSL, "closed_loop")
    field(VAL,  "0")
    field(ZRST, "Full")
    field(ZRVL, "0")
    field(ONST, "Beam Off")
    field(ONVL, "1")
    field(TWST, "Kicker STBY")
    field(TWVL, "2")
    field(THST, "BC1Hz")
    field(THVL, "3")
    field(FRST, "BC10Hz")
    field(FRVL, "4")
    field(FVST, "Diagnostic")
    field(FVVL, "5")
    field(SXST, "BC120Hz")
    field(SXVL, "6")
    field(SVST, "Tuning")
    field(SVVL, "7")
    field(EIST, "1% MAP")
    field(EIVL, "8")
    field(NIST, "5% MAP")
    field(NIVL, "9")
    field(TEST, "10% MAP")
    field(TEVL, "10")
    field(ELST, "25% MAP")
    field(ELVL, "11")
    field(TVST, "50% MAP")
    field(TVVL, "12")
    field(TTST, "100% MAP")
    field(TTVL, "13")
    field(FTST, "Full")
    field(FTVL, "14")
}

